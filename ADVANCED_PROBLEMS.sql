SELECT * FROM MEMBERS
SELECT * FROM BRANCH
SELECT * FROM EMPLOYEE
SELECT * FROM BOOKS
SELECT * FROM ISSUED_STATUS
SELECT * FROM RETURN_STATUS
/* ADVANCED SQL OPERATIONS 

Task 13: Identify Members with Over due Books

Write a query to identify members who have over due books (assume a 30-day return period). Display the member's_id, member's name, book title, issue date, and days over due.*/

--ISSUED_BOOKS==MEMBERS==BOOKS==RETUEN_STATUS
--FILTER BOOKS WHICH ARE RETURN
--OVER DUE > 30

SELECT 
   IST.ISSUED_MEMBER_ID,
   M.MEMBER_NAME,
   B.BOOKS_TITLE,
   IST.ISSUED_DATE,
   CURRENT_DATE-IST.ISSUED_DATE AS OVER_DUES_DAYS
FROM ISSUED_STATUS AS IST
JOIN 
MEMBERS AS M
ON M.MEMBER_ID=IST.ISSUED_MEMBER_ID
JOIN 
BOOKS AS B
ON B.ISBN=IST.ISSUED_BOOK_ISBN
LEFT JOIN
RETURN_STATUS AS RS
ON RS.ISSUED_ID=IST.ISSUED_ID
WHERE 
RS.RETURN_DATE IS NULL 
AND 
(CURRENT_DATE-IST.ISSUED_DATE) > 30
ORDER BY 1

/*Task 14: Update Book Status on Return

Write a query to update the status of books in the books table to "Yes" when they are returned (based on entries in the return_status table).*/

--MANUALLY
SELECT * FROM BOOKS
WHERE ISBN='978-0-451-52994-2'

UPDATE  BOOKS
SET STATUS='no'
WHERE ISBN='978-0-451-52994-2'

SELECT * FROM ISSUED_STATUS
WHERE ISSUED_BOOK_ISBN='978-0-451-52994-2'

SELECT * FROM RETURN_STATUS
WHERE ISSUED_ID='IS130'

INSERT INTO RETURN_STATUS(RETURN_ID,ISSUED_ID,RETURN_DATE,BOOK_QUALITY)
VALUES
('RS125','IS130',CURRENT_DATE,'GOOD')
SELECT * FROM RETURN_STATUS
WHERE ISSUED_ID='IS130'

--WITH SQL STORE PROCEDURES

CREATE OR REPLACE PROCEDURE ADD_RETURN_RECORDS(P_RETURN_ID VARCHAR(10),P_ISSUED_ID VARCHAR(10),P_BOOK_QUALITY VARCHAR(10))
LANGUAGE PLPGSQL
AS $$

DECLARE
   V_ISBN VARCHAR(50);
   V_BOOK_NAME VARCHAR(80);
BEGIN
   --ALL YOUR LOGIC AND CODE
   --INSERTING INTO RETURNS BASED ON USERS INPUT
   INSERT INTO RETURN_STATUS(RETURN_ID,ISSUED_ID,RETURN_DATE,BOOK_QUALITY)
   VALUES
   (P_RETURN_ID,P_ISSUED_ID,CURRENT_DATE,P_BOOK_QUALITY);

   SELECT 
      ISSUED_BOOK_ISBN,
	  ISSUED_BOOK_NAME
	  INTO
	  V_ISBN
	  V_BOOK_NAME
   FROM ISSUED_STATUS
   WHERE ISSUED_ID=P_ISSUED_ID;
   
   UPDATE  BOOKS
   SET STATUS='YES'
   WHERE ISBN='V_ISBN';

   RAISE NOTICE 'THANK YOU FOR RETURNING THE BOOK:%',V_BOOK_NAME;
   
END;
$$

-- Testing FUNCTION add_return_records

ISSUED_ID = IS135
ISBN = WHERE ISBN = '978-0-307-58837-1'

SELECT * FROM BOOKS
WHERE ISBN = '978-0-307-58837-1'

SELECT * FROM ISSUED_STATUS
WHERE ISSUED_BOOK_ISBN = '978-0-307-58837-1'

SELECT * FROM RETURN_STATUS
WHERE ISSUED_ID = 'IS135'
--CALLING FUNCTIONS
CALL ADD_RETURN_RECORDS('RS138', 'IS135', 'Good')
--CALLING FUNCTIONS
CALL ADD_RETURN_RECORDS('RS148', 'IS140', 'Good')

/*Task 15: Branch Performance Report
Create a query that generates a performance report for each branch, showing the number of books issued, the number of books returned, and the total revenue generated from book rentals.*/

CREATE TABLE BRANCH_REPORTS
AS
SELECT 
    B.BRANCH_ID,
    B.MANAGER_ID,
    COUNT(IST.ISSUED_ID) AS NUMBER_OF_BOOKS_ISSUED,
    COUNT(RS.RETURN_ID) AS NUMBER_OF_BOOKS_RETURNED,
    SUM(BK.RENTAL_PRICE) AS TOTAL_REVENUE
FROM ISSUED_STATUS AS IST
JOIN 
EMPLOYEE AS E
ON E.EMP_ID = IST.ISSUED_EMP_ID
JOIN
BRANCH AS B
ON E.BRANCH_ID = B.BRANCH_ID
LEFT JOIN
RETURN_STATUS AS RS 
ON RS.ISSUED_ID = IST.ISSUED_ID
JOIN 
BOOKS AS BK
ON IST.ISSUED_BOOK_ISBN = BK.ISBN
GROUP BY 1,2

SELECT * FROM BRANCH_REPORTS

/*Task 16: CTAS: Create a Table of Active Members

Use the CREATE TABLE AS (CTAS) statement to create a new table active_members containing members who have issued at least one book in the last 2 months.*/

CREATE TABLE ACTIVE_MEMBERS
AS
SELECT * FROM MEMBERS
WHERE MEMBER_ID IN (SELECT 
                        DISTINCT ISSUED_MEMBER_ID   
                    FROM ISSUED_STATUS
                    WHERE 
                        ISSUED_DATE >= CURRENT_DATE - INTERVAL '2 month'
                    )

SELECT * FROM ACTIVE_MEMBERS

/*Task 17: Find Employees with the Most Book Issues Processed

Write a query to find the top 3 employees who have processed the most book issues. Display the employee name, number of books processed, and their branch.*/

SELECT 
    E.EMP_NAME,
    B.*,
    COUNT(IST.ISSUED_ID) as NO_BOOK_ISSUED
	FROM ISSUED_STATUS as IST
JOIN
EMPLOYEE as E
ON E.EMP_ID = IST.ISSUED_EMP_ID
JOIN
BRANCH as B
ON E.BRANCH_ID = B.BRANCH_ID
GROUP BY 1,2
